function ::CreatePassageDetector() {

  object ch = dom.GetObject(chnId);
  string chnAddress = ch.Address();
  string devAddress = chnAddress.StrValueByIndex(":",0);
  string chnNumber = chnAddress.StrValueByIndex(":",1);

  string chnRight2Left = devAddress#":2";
  string chnLeft2Right = devAddress#":3";

  string curPassageDetection = "${lblUnknown}";
  string lastPassageDetection = "${lblUnknown}";

  string curPassageDetectionRL = "${lblCurPassageDetectionRL}";
  string curPassageDetectionLR = "${lblCurPassageDetectionLR}";
  string lastPassageDetectionRL = "${lblLastPassageDetectionRL}";
  string lastPassageDetectionLR = "${lblLastPassageDetectionLR}";

  string lblOverFlowLeft = "${lblUnknown}";
  string lblOverFlowRight = "${lblUnknown}";

  string cssCurPassageDir = "ControlBtnInfo";
  string cssLastPassageDir = "ControlBtnInfo";

  string cssChannel = "";

  object oCurrentPassageDirectionRL;
  object oCurrentPassageDirectionLR;
  object oLastPassageDirectionRL;
  object oLastPassageDirectionLR;
  object oPassageCounterOverflowRL;
  object oPassageCounterOverflowLR;
  object oPassageCounterValueRL;
  object oPassageCounterValueLR;

  boolean bCurrentPassageDirectionRL = false;
  boolean bCurrentPassageDirectionLR = false;
  boolean bLastPassaageDirectionRL = false;
  boolean bLastPassaageDirectionLR = false;
  boolean bPassageCounterOverflowRL = false;
  boolean bPassageCounterOverflowLR = false;
  integer iPassageCounterValueRL = -1;
  integer iPassageCounterValueLR = -1;


  if (ch.HssType().Find("PASSAGE_DETECTOR_DIRECTION_TRANSMITTER") != -1) {

    oCurrentPassageDirectionRL = dom.GetObject("HmIP-RF."#chnRight2Left#".CURRENT_PASSAGE_DIRECTION");
    if (!oCurrentPassageDirectionRL) {oCurrentPassageDirectionRL = dom.GetObject("HmIP-RF."#chnRight2Left#".CURRENT_PASSAGE_DIRECTIO");}

    oCurrentPassageDirectionLR = dom.GetObject("HmIP-RF."#chnLeft2Right#".CURRENT_PASSAGE_DIRECTION");
    if (!oCurrentPassageDirectionLR) {oCurrentPassageDirectionLR = dom.GetObject("HmIP-RF."#chnLeft2Right#".CURRENT_PASSAGE_DIRECTIO");}

    if (oCurrentPassageDirectionRL) {bCurrentPassageDirectionRL = oCurrentPassageDirectionRL.Value();}
    if (oCurrentPassageDirectionLR) {bCurrentPassageDirectionLR = oCurrentPassageDirectionLR.Value();}

    oLastPassageDirectionRL = dom.GetObject("HmIP-RF."#chnRight2Left#".LAST_PASSAGE_DIRECTION");
    oLastPassageDirectionLR = dom.GetObject("HmIP-RF."#chnLeft2Right#".LAST_PASSAGE_DIRECTION");
    if (oLastPassageDirectionRL) {bLastPassaageDirectionRL = oLastPassageDirectionRL.Value();}
    if (oLastPassageDirectionLR) {bLastPassaageDirectionLR = oLastPassageDirectionLR.Value();}

    oPassageCounterOverflowRL = dom.GetObject("HmIP-RF."#chnRight2Left#".PASSAGE_COUNTER_OVERFLOW");
    oPassageCounterOverflowLR = dom.GetObject("HmIP-RF."#chnLeft2Right#".PASSAGE_COUNTER_OVERFLOW");
    if (oPassageCounterOverflowRL) {bPassageCounterOverflowRL = oPassageCounterOverflowRL.Value();}
    if (oPassageCounterOverflowLR) {bPassageCounterOverflowLR = oPassageCounterOverflowLR.Value();}

    oPassageCounterValueRL = dom.GetObject("HmIP-RF."#chnRight2Left#".PASSAGE_COUNTER_VALUE");
    oPassageCounterValueLR = dom.GetObject("HmIP-RF."#chnLeft2Right#".PASSAGE_COUNTER_VALUE");
    if (oPassageCounterOverflowRL) {iPassageCounterValueRL = oPassageCounterValueRL.Value();}
    if (oPassageCounterValueLR) {iPassageCounterValueLR = oPassageCounterValueLR.Value();}

!    if (oCurrentPassageDirection.Value() == true) {
!      cssCurPassageDir = "ControlBtnOn";
!    }
!    if (oLastPassageDirection.Value() == true) {
!      cssLastPassageDir = "ControlBtnOn";
!    }

  }
  if (bCurrentPassageDirectionRL == true) {
    curPassageDetection = curPassageDetectionRL;
  }

  if (bCurrentPassageDirectionLR == true) {
    curPassageDetection = curPassageDetectionLR;
  }

  if (bLastPassaageDirectionRL == true) {
    lastPassageDetection = lastPassageDetectionRL;
  }

  if (bLastPassaageDirectionLR == true) {
    lastPassageDetection = lastPassageDetectionLR;
  }

  if (bPassageCounterOverflowRL) {
   lblOverFlowLeft = "${dialogYes}";
  } else {
    lblOverFlowLeft = "${dialogNo}";
  }

  if (bPassageCounterOverflowLR) {
    lblOverFlowRight = "${dialogYes}";
  } else {
    lblOverFlowRight = "${dialogNo}";
  }

  WriteLine("<td>");

    if (chnNumber == 3) {
      cssChannel = "hidden";
      WriteLine("<table id='tdChannel3"#chnId#"' align='center'>");
        WriteLine("<tr>");
          WriteLine("<td>");
            WriteLine("<div class='ControlBtnInfo' style='text-align:center'>");
              WriteLine("${lblPassageDetectorNoParams}");
            WriteLine("</div>");
          WriteLine("</td>");
        WriteLine("</tr>");
      WriteLine("</table>");
    }

    WriteLine("<table id='tdChannel2"#chnId#"' class="#cssChannel#">");
      WriteLine("<tr>");
        WriteLine("<td>");
          WriteLine("<div class='"#cssCurPassageDir#"'>");
            WriteLine("${identifiedPassage}:<br/>"#curPassageDetection);
          WriteLine("</div>");
        WriteLine("</td>");
        WriteLine("<td>");
          WriteLine("<div class='"#cssLastPassageDir#"'>");
            WriteLine("${lastIdentifiedPassage}:<br/>"#lastPassageDetection);
          WriteLine("</div>");
        WriteLine("</td>");
      WriteLine("</tr>");
      WriteLine("<tr>");
        WriteLine("<td>");
          WriteLine("<div class='"#cssLastPassageDir#"'>");
            WriteLine("${capturedPassageLeft}:<br/><span name='passageCounterValueLR'>"#iPassageCounterValueLR#"</span>");
          WriteLine("</div>");
        WriteLine("</td>");
        WriteLine("<td>");
          WriteLine("<div class='"#cssLastPassageDir#"'>");
            WriteLine("${capturedPassageRight}:<br/>"#iPassageCounterValueRL);
          WriteLine("</div>");
        WriteLine("</td>");
      WriteLine("</tr>");
      WriteLine("<tr>");
        WriteLine("<td>");
          WriteLine("<div class='ControlBtnInfo'>");
            WriteLine("${overflowRightPassage}:<br/>"#lblOverFlowLeft);
          WriteLine("</div>");
        WriteLine("</td>");
        WriteLine("<td>");
          WriteLine("<div class='ControlBtnInfo'>");
            WriteLine("${overflowLeftPassage}:<br/><span name='passageCounterOverflowLR'>"#lblOverFlowRight#"</span>");
          WriteLine("</div>");
        WriteLine("</td>");
      WriteLine("</tr>");
    WriteLine("</table>");

  WriteLine("</td>");


  ! Channel 2 (right/left) and 3 (left/right) are summarized in channel 2. Channel 3 is not visible

  if (chnNumber == 3) {
    object oDevice = dom.GetObject(cObj.Device());
    integer i1DevId = -1;
    integer i1ChnId = -1;
    integer iDevId = oDevice.ID();
    integer iChnId = chnId;

    if (iDevId) {i1DevId = iDevId;}
    if (iChnId) {i1ChnId = iChnId;}

    WriteLine("<script type='text/javascript'>");
      WriteLine("var opts = {};");
      WriteLine("opts.devId = "#i1DevId#";");
      WriteLine("opts.chnId = "#i1ChnId#";");

      ! WriteLine("jQuery('#tdChannel3"#chnId#"').show();");

      WriteLine("var oPassageDetector = new iseHmIPPassageDetector(opts);");

      WriteLine("jQuery('[name=\"passageCounterValueLR\"]').first().text('"#iPassageCounterValueLR#"');");
      if (bPassageCounterOverflowRL) {
        WriteLine("jQuery('[name=\"passageCounterOverflowLR\"]').first().text(translateKey('dialogYes'));");
      } else {
        WriteLine("jQuery('[name=\"passageCounterOverflowLR\"]').first().text(translateKey('dialogNo'));");
      }
      ! The timestamp of an event of channel 3 must be shown at channel 2
      WriteLine("var curTimeStampElm = jQuery('#tmc"#chnId#"');");
      WriteLine("jQuery('[name=\"timeStamp\"]').first().text(curTimeStampElm.text());");

      WriteLine("oPassageDetector.hide();");

    WriteLine("</script>");
  }
}